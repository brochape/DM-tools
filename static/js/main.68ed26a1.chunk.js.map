{"version":3,"sources":["Globals.tsx","overmind/state.ts","overmind/actions.ts","overmind/index.ts","molecule/CharacterSheetsPage/CharacterSheetsPage.tsx","molecule/RollDicePage/RollDicePage.tsx","molecule/MainPageContent/MainPageContent.tsx","atom/MenuElement/MenuElement.tsx","molecule/SideMenu/SideMenu.tsx","App.tsx","index.tsx"],"names":["PAGE","state","title","currentPage","ROLL_DICE","characterSheets","Map","setPage","value","addCharSheet","console","log","set","charName","charSheet","setCharSheets","config","actions","useOvermind","createHook","createStateHook","createActionsHook","createEffectsHook","createReactionHook","CharacterSheetsPage","useState","currentSheet","setCurrentSheet","displayCharSheet","e","clickedChar","target","textContent","get","charButtons","pair","key","push","className","onClick","useEffect","size","locallySavedChars","window","localStorage","getItem","savedChars","JSON","parse","id","type","selectedFile","document","getElementById","files","length","base64","fileToLoad","fileReader","FileReader","onload","fileLoadedEvent","result","replace","readAsDataURL","scale","scaleStep","maxScale","minScale","hideRotation","RollDicePage","diceString","setDiceString","diceRollTotal","setDiceRollTotal","diceRollDetail","setDiceRollDetail","formulaOutput","DiceRoll","output","split","ex","onChange","evt","event","placeholder","htmlFor","MainPageContent","CHARACTER_SHEETS","MenuElement","props","associatedComponent","SideMenu","App","overmind","createOvermind","ReactDOM","render"],"mappings":"8vBAAYA,E,iDAAAA,O,yBAAAA,I,wCAAAA,M,iBCCCC,EAAQ,CACjBC,MAAO,SACPC,YAAaH,EAAKI,UAClBC,gBAAiB,IAAIC,KCFZC,EAAwB,SAAC,EAElCC,GACO,EAFLP,MAGIE,YAAcK,GAQXC,EAAwC,SAAC,EAElDD,GACQ,IAFNP,EAEK,EAFLA,MAGFS,QAAQC,IAAI,gBACZV,EAAMI,gBAAkB,IAAIC,IAAIL,EAAMI,iBAAiBO,IACnDJ,EAAMK,SACNL,EAAMM,YAIDC,EAA6C,SAAC,EAEvDP,GACO,EAFLP,MAGII,gBAAkBG,GClBfQ,EAAS,CACpBf,QACAgB,WAUWC,EAAcC,c,GACHC,cACEC,cACAC,cACCC,c,iDCrBdC,EAAyC,WAAO,IAAD,IAC7BN,IAAnBjB,EADgD,EAChDA,MAAOgB,EADyC,EACzCA,QADyC,EAIhBQ,mBAAiB,IAJD,mBAIjDC,EAJiD,KAInCC,EAJmC,KAMlDC,EAAmB,SAACC,GACtB,IAAMC,EAAeD,EAAEE,OAA6BC,YAChDF,GACAH,EAAgB1B,EAAMI,gBAAgB4B,IAAIH,IAAgB,KAI5DI,EAAqB,GAb6B,cAcvCjC,EAAMI,iBAdiC,IAcxD,2BAAwC,CAAC,IAAhC8B,EAA+B,sBACjBA,EADiB,GAC/BC,EAD+B,UAEpCF,EAAYG,KACR,wBACIC,UAAW,aAEXC,QAASX,EAHb,SAKKQ,GAHI,QAAUA,KAnB6B,8BA2BxDI,qBAAU,WACN,GAAmC,IAA/BvC,EAAMI,gBAAgBoC,KAAY,CAClC,IAAMC,EAAoBC,OAAOC,aAAaC,QAC1C,iBAEAC,EAAa,IAAIxC,IACjBoC,IACAI,EAAaC,KAAKC,MAAMN,IAE5BhC,QAAQC,IAAI,eACZM,EAAQF,cAAc+B,MAE3B,IAmCH,OACI,sBAAKR,UAAW,WAAhB,UACI,sBAAKA,UAAW,cAAhB,UACKJ,EACD,uBACIe,GAAG,kBACHC,KAAK,OACLZ,UAAW,eAEf,uBAAOW,GAAI,WAAYC,KAAK,SAC5B,wBAAQX,QA3CD,WAAO,IAAD,EAEfY,GAAe,UAACC,gBAAD,aAAC,EAAUC,eAC5B,oBACmBC,MAEjBzC,EAAYuC,SAASC,eACvB,YACmB7C,MAEvB,GAAI2C,GAAgBA,EAAaI,OAAS,EAAG,CAEzC,IAGIC,EAHAC,EAAaN,EAAa,GAE1BO,EAAa,IAAIC,WAGrBD,EAAWE,OAAS,SAAUC,GAAkB,IAAD,EAC3CL,EAAM,OAAGK,QAAH,IAAGA,GAAH,UAAGA,EAAiB9B,cAApB,aAAG,EAAyB+B,OAClCpD,QAAQC,IAAI,SAAUV,EAAMI,iBAC5BY,EAAQR,aAAa,CACjBI,SAAUA,EACVC,UAAW0C,EAAOO,QACd,+BACA,OAKZL,EAAWM,cAAcP,KAcQnB,UAAW,aAAxC,kBAIc,KAAjBZ,EACG,qBAAKY,UAAW,YAAhB,SACI,cAAC,IAAD,CACIc,SAAU,CACNI,OAAQ9B,GAEZuC,MAAO,IACPC,UAAW,GACXC,SAAU,EACVC,SAAU,GACVC,cAAY,MAGpB,S,SCpGHC,G,OAAkC,WAAO,IAAD,EACf7C,mBAAiB,IADF,mBAC5C8C,EAD4C,KAChCC,EADgC,OAET/C,mBAAiB,IAFR,mBAE5CgD,EAF4C,KAE7BC,EAF6B,OAGPjD,mBAAiB,IAHV,mBAG5CkD,EAH4C,KAG5BC,EAH4B,KAIjDpC,qBAAU,WACN,IACI,IAAMqC,GAAiB,GAAK,IAAIC,WAASP,GAAYQ,QAAQC,MACzD,OAEJJ,EAAkBC,EAAc,GAAGG,MAAM,MAAM,IAC/CN,EAAiBG,EAAc,IACjC,MAAOI,GACLL,EAAkB,mBAClBF,EAAiB,QAEtB,CAACH,IAMJ,OACI,sBAAKjC,UAAW,WAAhB,UACI,qBAAKA,UAAW,gBAAhB,uBACA,sBAAKA,UAAW,oBAAhB,UACI,uBACIA,UAAW,eACXW,GAAI,UACJiC,SAAU,SAACC,GAAD,OAXJC,EAW0BD,EAV5CzE,QAAQC,IAAIyE,QACZZ,EAAcY,EAAMrD,OAAOvB,OAFV,IAAC4E,GAYN5E,MAAO+D,EACPc,YAAY,iBAEhB,uBAAOC,QAAS,UAAWhD,UAAW,oBAAtC,6BAIJ,qBAAKA,UAAU,sBAAf,SAAsCqC,IACtC,qBAAKrC,UAAU,qBAAf,SAAqCmC,SCnCpCc,G,OAAqC,WAEhD,OADkBrE,IAAVjB,MACME,aACZ,KAAKH,EAAKI,UACR,OAAO,cAAC,EAAD,IACT,KAAKJ,EAAKwF,iBACR,OAAO,cAAC,EAAD,IAEX,OAAO,0BCLIC,G,OAAoD,SAACC,GAAW,IAEnEnF,EADYW,IAAZD,QACAV,QACR,OACE,qBACE+B,UAAW,cACXC,QAAS,kBAAMhC,EAAQmF,EAAMC,sBAF/B,SAIGD,EAAMxF,UCbA0F,G,OAA8B,WACzC,OACE,sBAAKtD,UAAW,WAAhB,UACE,cAAC,EAAD,CAAapC,MAAO,YAAayF,oBAAqB3F,EAAKI,YAC3D,cAAC,EAAD,CACEF,MAAO,mBACPyF,oBAAqB3F,EAAKwF,wBCCnBK,MATf,WACE,OACE,sBAAKvD,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,Q,QCAAwD,EAAWC,YAAe/E,GAEhCgF,IAASC,OACP,cAAC,IAAD,CAAUzF,MAAOsF,EAAjB,SACE,cAAC,EAAD,MAEF1C,SAASC,eAAe,U","file":"static/js/main.68ed26a1.chunk.js","sourcesContent":["export enum PAGE {\r\n  ROLL_DICE,\r\n  CHARACTER_SHEETS,\r\n}\r\n","import { PAGE } from './../Globals';\r\nexport const state = {\r\n    title: 'My App',\r\n    currentPage: PAGE.ROLL_DICE,\r\n    characterSheets: new Map<string, string>(),\r\n};\r\n","import { Action, Context } from 'overmind';\r\nimport { PAGE } from './../Globals';\r\nexport const setPage: Action<PAGE> = (\r\n    { state }: Context,\r\n    value: PAGE\r\n): void => {\r\n    state.currentPage = value;\r\n};\r\n\r\ninterface ICharSheetEntry {\r\n    charName: string;\r\n    charSheet: string;\r\n}\r\n\r\nexport const addCharSheet: Action<ICharSheetEntry> = (\r\n    { state }: Context,\r\n    value: ICharSheetEntry\r\n): void => {\r\n    console.log('adding entry');\r\n    state.characterSheets = new Map(state.characterSheets).set(\r\n        value.charName,\r\n        value.charSheet\r\n    );\r\n};\r\n\r\nexport const setCharSheets: Action<Map<string, string>> = (\r\n    { state }: Context,\r\n    value: Map<string, string>\r\n): void => {\r\n    state.characterSheets = value;\r\n};\r\n","import { IConfig } from 'overmind';\r\nimport {\r\n  createHook,\r\n  createStateHook,\r\n  createActionsHook,\r\n  createEffectsHook,\r\n  createReactionHook,\r\n} from 'overmind-react';\r\nimport { state } from './state';\r\nimport * as actions from './actions';\r\n\r\nexport const config = {\r\n  state,\r\n  actions,\r\n};\r\n\r\ndeclare module 'overmind' {\r\n  interface Config extends IConfig<typeof config> {\r\n    state: typeof config.state;\r\n    actions: typeof config.actions;\r\n  }\r\n}\r\n\r\nexport const useOvermind = createHook<typeof config>();\r\nexport const useState = createStateHook<typeof config>();\r\nexport const useActions = createActionsHook<typeof config>();\r\nexport const useEffects = createEffectsHook<typeof config>();\r\nexport const useReaction = createReactionHook<typeof config>();\r\n","import React, { useEffect, useState } from 'react';\r\nimport PDFViewer from 'pdf-viewer-reactjs';\r\nimport { FunctionComponent } from 'react';\r\nimport './CharacterSheetsPage.css';\r\nimport { useOvermind } from '../../overmind';\r\n\r\nexport const CharacterSheetsPage: FunctionComponent = () => {\r\n    const { state, actions } = useOvermind();\r\n\r\n    // const [chars, setChars] = useState<Map<string, string>>(new Map());\r\n    const [currentSheet, setCurrentSheet] = useState<string>('');\r\n\r\n    const displayCharSheet = (e: React.MouseEvent<HTMLElement>) => {\r\n        const clickedChar = (e.target as HTMLButtonElement).textContent;\r\n        if (clickedChar) {\r\n            setCurrentSheet(state.characterSheets.get(clickedChar) || '');\r\n        }\r\n    };\r\n\r\n    const charButtons: any[] = [];\r\n    for (let pair of state.characterSheets) {\r\n        var [key, value] = pair;\r\n        charButtons.push(\r\n            <button\r\n                className={'charButton'}\r\n                key={'char ' + key}\r\n                onClick={displayCharSheet}\r\n            >\r\n                {key}\r\n            </button>\r\n        );\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (state.characterSheets.size === 0) {\r\n            const locallySavedChars = window.localStorage.getItem(\r\n                'DM-tool-chars'\r\n            );\r\n            let savedChars = new Map();\r\n            if (locallySavedChars) {\r\n                savedChars = JSON.parse(locallySavedChars);\r\n            }\r\n            console.log('Reset chars');\r\n            actions.setCharSheets(savedChars);\r\n        }\r\n    }, []);\r\n\r\n    const processPDF = () => {\r\n        //Read File\r\n        const selectedFile = (document?.getElementById(\r\n            'pdfUploadButton'\r\n        ) as HTMLInputElement).files;\r\n\r\n        const charName = (document.getElementById(\r\n            'charName'\r\n        ) as HTMLInputElement).value;\r\n        //Check File is not Empty\r\n        if (selectedFile && selectedFile.length > 0) {\r\n            // Select the very first file from list\r\n            var fileToLoad = selectedFile[0];\r\n            // FileReader function for read the file.\r\n            var fileReader = new FileReader();\r\n            var base64;\r\n            // Onload of file read the file content\r\n            fileReader.onload = function (fileLoadedEvent) {\r\n                base64 = fileLoadedEvent?.target?.result;\r\n                console.log('Before', state.characterSheets);\r\n                actions.addCharSheet({\r\n                    charName: charName,\r\n                    charSheet: base64.replace(\r\n                        'data:application/pdf;base64,',\r\n                        ''\r\n                    ),\r\n                });\r\n            };\r\n            // Convert data to base64\r\n            fileReader.readAsDataURL(fileToLoad);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={'mainPage'}>\r\n            <div className={'charButtons'}>\r\n                {charButtons}\r\n                <input\r\n                    id=\"pdfUploadButton\"\r\n                    type=\"file\"\r\n                    className={'charButton'}\r\n                ></input>\r\n                <input id={'charName'} type=\"text\"></input>\r\n                <button onClick={processPDF} className={'charButton'}>\r\n                    +\r\n                </button>\r\n            </div>\r\n            {currentSheet !== '' ? (\r\n                <div className={'pdfViewer'}>\r\n                    <PDFViewer\r\n                        document={{\r\n                            base64: currentSheet,\r\n                        }}\r\n                        scale={1.2}\r\n                        scaleStep={0.5}\r\n                        maxScale={5}\r\n                        minScale={0.5}\r\n                        hideRotation\r\n                    />\r\n                </div>\r\n            ) : null}\r\n        </div>\r\n    );\r\n};\r\n","import * as React from 'react';\r\nimport { FunctionComponent, useEffect, useState } from 'react';\r\nimport { DiceRoll } from 'rpg-dice-roller';\r\nimport './RollDicePage.css';\r\n\r\nexport interface IAppProps {}\r\n\r\nexport const RollDicePage: FunctionComponent = () => {\r\n    let [diceString, setDiceString] = useState<string>('');\r\n    let [diceRollTotal, setDiceRollTotal] = useState<string>('');\r\n    let [diceRollDetail, setDiceRollDetail] = useState<string>('');\r\n    useEffect(() => {\r\n        try {\r\n            const formulaOutput = ('' + new DiceRoll(diceString).output).split(\r\n                ' = '\r\n            );\r\n            setDiceRollDetail(formulaOutput[0].split(': ')[1]);\r\n            setDiceRollTotal(formulaOutput[1]);\r\n        } catch (ex) {\r\n            setDiceRollDetail('Invalid formula');\r\n            setDiceRollTotal('0');\r\n        }\r\n    }, [diceString]);\r\n\r\n    const inputChanged = (event) => {\r\n        console.log(event);\r\n        setDiceString(event.target.value);\r\n    };\r\n    return (\r\n        <div className={'mainPage'}>\r\n            <div className={'mainPageTitle'}>Roll dice</div>\r\n            <div className={'formulaInputGroup'}>\r\n                <input\r\n                    className={'formulaInput'}\r\n                    id={'formula'}\r\n                    onChange={(evt) => inputChanged(evt)}\r\n                    value={diceString}\r\n                    placeholder=\"Dice Formula\"\r\n                />\r\n                <label htmlFor={'formula'} className={'formulaInputLabel'}>\r\n                    Dice formula\r\n                </label>\r\n            </div>\r\n            <div className=\"formulaResultDetail\">{diceRollDetail}</div>\r\n            <div className=\"formulaResultTotal\">{diceRollTotal}</div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { FunctionComponent } from 'react';\r\nimport { PAGE } from '../../Globals';\r\nimport { useOvermind } from '../../overmind';\r\nimport { CharacterSheetsPage } from '../CharacterSheetsPage/CharacterSheetsPage';\r\nimport { RollDicePage } from '../RollDicePage/RollDicePage';\r\n\r\nimport './MainPageContent.css';\r\n\r\nexport const MainPageContent: FunctionComponent = () => {\r\n  const { state } = useOvermind();\r\n  switch (state.currentPage) {\r\n    case PAGE.ROLL_DICE:\r\n      return <RollDicePage />;\r\n    case PAGE.CHARACTER_SHEETS:\r\n      return <CharacterSheetsPage />;\r\n  }\r\n  return <div />;\r\n};\r\n","import * as React from 'react';\r\nimport { FunctionComponent } from 'react';\r\nimport { PAGE } from '../../Globals';\r\nimport { useOvermind } from '../../overmind';\r\n\r\nimport './MenuElement.css';\r\n\r\ninterface IMenuElementProps {\r\n  title: string;\r\n  associatedComponent: PAGE;\r\n}\r\n\r\nexport const MenuElement: FunctionComponent<IMenuElementProps> = (props) => {\r\n  const { actions } = useOvermind();\r\n  const { setPage } = actions;\r\n  return (\r\n    <div\r\n      className={'menuElement'}\r\n      onClick={() => setPage(props.associatedComponent)}\r\n    >\r\n      {props.title}\r\n    </div>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport { FunctionComponent } from 'react';\r\nimport { MenuElement } from '../../atom/MenuElement/MenuElement';\r\nimport { PAGE } from '../../Globals';\r\n\r\nimport './SideMenu.css';\r\n\r\nexport const SideMenu: FunctionComponent = () => {\r\n  return (\r\n    <div className={'sideMenu'}>\r\n      <MenuElement title={'Roll Dice'} associatedComponent={PAGE.ROLL_DICE} />\r\n      <MenuElement\r\n        title={'Character Sheets'}\r\n        associatedComponent={PAGE.CHARACTER_SHEETS}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport { MainPageContent } from './molecule/MainPageContent/MainPageContent';\nimport { SideMenu } from './molecule/SideMenu/SideMenu';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SideMenu />\n      <MainPageContent />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { createOvermind } from 'overmind';\nimport { Provider } from 'overmind-react';\n// import reportWebVitals from './reportWebVitals';\n\nimport { config } from './overmind';\nconst overmind = createOvermind(config);\n\nReactDOM.render(\n  <Provider value={overmind}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}